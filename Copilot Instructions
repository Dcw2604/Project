# GitHub Copilot Instructions for EduConnect Educational Platform

## Project Overview
EduConnect is a React-based educational platform connecting students and teachers. It features student/teacher dashboards, class scheduling, AI chatbot assistance, level assessment tests, and document management.

## Tech Stack & Architecture
- **Frontend**: React 18+ with functional components and hooks
- **Styling**: Tailwind CSS v3+ (utility-first approach)
- **Icons**: Lucide React for consistent iconography
- **State Management**: React useState/useReducer, Context API for global state
- **File Structure**: Component-based architecture with clear separation of concerns

## Code Style & Standards

### React Component Guidelines
```javascript
// ✅ Use functional components with hooks
const StudentDashboard = ({ user, onLogout }) => {
  const [selectedTab, setSelectedTab] = useState('schedule');
  
  // Custom hooks for complex logic
  const { classes, loading, error } = useClasses(user.id);
  
  return (
    <div className="min-h-screen bg-gray-50">
      {/* Component content */}
    </div>
  );
};

// ✅ Export as default
export default StudentDashboard;
```

### File Naming Conventions
- **Components**: PascalCase (e.g., `StudentAuth.jsx`, `TeacherDashboard.jsx`)
- **Hooks**: camelCase starting with 'use' (e.g., `useAuth.js`, `useLocalStorage.js`)
- **Services**: camelCase (e.g., `apiService.js`, `authService.js`)
- **Utils**: camelCase (e.g., `formatDate.js`, `validation.js`)

### Directory Structure
```
src/
├── components/
│   ├── auth/                 # Authentication components
│   ├── dashboard/
│   │   ├── student/         # Student-specific components
│   │   └── teacher/         # Teacher-specific components
│   ├── common/              # Reusable UI components
│   └── layout/              # Layout components
├── hooks/                   # Custom React hooks
├── services/                # API calls and external services
├── context/                 # React Context providers
├── utils/                   # Helper functions
└── styles/                  # Global styles
```

## Tailwind CSS Best Practices

### Component Styling
```javascript
// ✅ Use Tailwind utility classes
<div className="bg-white rounded-lg shadow-md p-6">
  <h2 className="text-xl font-semibold text-gray-800 mb-4">
    Student Dashboard
  </h2>
  <button className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
    Book Class
  </button>
</div>

// ✅ Use responsive design
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
  {/* Responsive grid */}
</div>

// ✅ Consistent color scheme
// Primary: blue-600, blue-700
// Secondary: green-600, green-700
// Neutral: gray-50, gray-100, gray-800
```

### Form Components
```javascript
// ✅ Consistent form styling
<input
  type="email"
  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
  placeholder="Email address"
/>

<select className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
  <option value="">Select Subject</option>
</select>
```

## Component Development Patterns

### State Management
```javascript
// ✅ Use appropriate state management
// Local state for component-specific data
const [formData, setFormData] = useState({
  firstName: '',
  lastName: '',
  email: ''
});

// Context for global state (user auth, theme)
const { user, login, logout } = useContext(AuthContext);

// Custom hooks for complex logic
const useStudentClasses = (studentId) => {
  const [classes, setClasses] = useState([]);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    fetchStudentClasses(studentId)
      .then(setClasses)
      .finally(() => setLoading(false));
  }, [studentId]);
  
  return { classes, loading };
};
```

### Error Handling
```javascript
// ✅ Implement proper error handling
const handleSubmit = async () => {
  try {
    setLoading(true);
    setError(null);
    
    const result = await apiService.bookClass(classId);
    setBookingStatus('success');
    
  } catch (error) {
    setError('Failed to book class. Please try again.');
    console.error('Booking error:', error);
  } finally {
    setLoading(false);
  }
};

// ✅ Display user-friendly error messages
{error && (
  <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg">
    {error}
  </div>
)}
```

### Loading States
```javascript
// ✅ Show loading indicators
{loading ? (
  <div className="flex items-center justify-center py-8">
    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
  </div>
) : (
  <ClassList classes={classes} />
)}
```

## Educational Platform Specific Guidelines

### User Role Management
```javascript
// ✅ Handle different user roles
const DashboardRouter = ({ user }) => {
  if (!user) return <AuthPage />;
  
  switch (user.type) {
    case 'student':
      return <StudentDashboard user={user} />;
    case 'teacher':
      return <TeacherDashboard user={user} />;
    default:
      return <ErrorPage message="Invalid user type" />;
  }
};
```

### Class Scheduling Components
```javascript
// ✅ Time slot handling
const TimeSlot = ({ slot, onBook, disabled }) => (
  <div className={`border rounded-lg p-4 ${
    disabled ? 'bg-gray-100 cursor-not-allowed' : 'bg-white hover:bg-blue-50 cursor-pointer'
  }`}>
    <div className="flex justify-between items-center">
      <div>
        <p className="font-semibold">{slot.subject}</p>
        <p className="text-gray-600">{slot.teacher}</p>
        <p className="text-sm text-gray-500">{slot.date} at {slot.time}</p>
      </div>
      <button
        onClick={() => onBook(slot.id)}
        disabled={disabled}
        className="bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700 disabled:bg-gray-400"
      >
        Book
      </button>
    </div>
  </div>
);
```

### Test/Assessment Components
```javascript
// ✅ Question display with progress
const QuestionCard = ({ question, currentIndex, totalQuestions, onAnswer }) => (
  <div className="bg-white rounded-lg shadow-md p-6">
    <div className="mb-4">
      <div className="bg-gray-200 rounded-full h-2">
        <div 
          className="bg-blue-600 h-2 rounded-full transition-all duration-300"
          style={{ width: `${((currentIndex + 1) / totalQuestions) * 100}%` }}
        />
      </div>
      <p className="text-sm text-gray-600 mt-2">
        Question {currentIndex + 1} of {totalQuestions}
      </p>
    </div>
    
    <h3 className="text-lg font-semibold mb-4">{question.text}</h3>
    
    <div className="space-y-3">
      {question.options.map((option, index) => (
        <label key={index} className="flex items-center space-x-3 cursor-pointer">
          <input
            type="radio"
            name="answer"
            value={option}
            onChange={(e) => onAnswer(e.target.value)}
            className="w-4 h-4 text-blue-600"
          />
          <span>{option}</span>
        </label>
      ))}
    </div>
  </div>
);
```

### Document Upload Components
```javascript
// ✅ File upload with validation
const DocumentUpload = ({ onUpload, acceptedTypes = '.pdf,.doc,.docx,.txt' }) => {
  const [dragOver, setDragOver] = useState(false);
  
  const handleFileSelect = (files) => {
    const validFiles = Array.from(files).filter(file => {
      const isValidType = acceptedTypes.includes(file.type);
      const isValidSize = file.size <= 5 * 1024 * 1024; // 5MB
      return isValidType && isValidSize;
    });
    
    if (validFiles.length > 0) {
      onUpload(validFiles);
    }
  };
  
  return (
    <div
      className={`border-2 border-dashed rounded-lg p-6 text-center ${
        dragOver ? 'border-blue-500 bg-blue-50' : 'border-gray-300'
      }`}
      onDragOver={(e) => { e.preventDefault(); setDragOver(true); }}
      onDragLeave={() => setDragOver(false)}
      onDrop={(e) => {
        e.preventDefault();
        setDragOver(false);
        handleFileSelect(e.dataTransfer.files);
      }}
    >
      <input
        type="file"
        multiple
        accept={acceptedTypes}
        onChange={(e) => handleFileSelect(e.target.files)}
        className="hidden"
        id="file-upload"
      />
      <label htmlFor="file-upload" className="cursor-pointer">
        <div className="text-gray-600">
          <p>Drop files here or click to upload</p>
          <p className="text-sm">Supported: PDF, DOC, DOCX, TXT (max 5MB)</p>
        </div>
      </label>
    </div>
  );
};
```

## API Integration Best Practices

### Service Layer Structure
```javascript
// ✅ Centralized API service
class ApiService {
  constructor() {
    this.baseURL = process.env.REACT_APP_API_BASE_URL;
    this.timeout = 10000;
  }
  
  async request(endpoint, options = {}) {
    const token = localStorage.getItem('authToken');
    
    const config = {
      headers: {
        'Content-Type': 'application/json',
        ...(token && { Authorization: `Bearer ${token}` }),
        ...options.headers,
      },
      ...options,
    };
    
    try {
      const response = await fetch(`${this.baseURL}${endpoint}`, config);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      return await response.json();
    } catch (error) {
      console.error(`API Error (${endpoint}):`, error);
      throw error;
    }
  }
  
  // Student methods
  async getStudentClasses(studentId) {
    return this.request(`/students/${studentId}/classes`);
  }
  
  async bookClass(classId, studentId) {
    return this.request(`/classes/${classId}/book`, {
      method: 'POST',
      body: JSON.stringify({ studentId }),
    });
  }
  
  // Teacher methods
  async getTeacherRequests(teacherId) {
    return this.request(`/teachers/${teacherId}/requests`);
  }
  
  async approveClassRequest(requestId) {
    return this.request(`/requests/${requestId}/approve`, {
      method: 'PUT',
    });
  }
}

export default new ApiService();
```

## Security & Data Protection

### Sensitive Data Handling
```javascript
// ✅ Don't log sensitive information
console.log('User logged in:', { 
  id: user.id, 
  role: user.type 
  // ❌ Don't log: email, password, personal details
});

// ✅ Validate inputs
const validateEmail = (email) => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

// ✅ Sanitize user inputs
const sanitizeInput = (input) => {
  return input.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '');
};
```

## Performance Optimization

### Code Splitting & Lazy Loading
```javascript
// ✅ Lazy load dashboard components
const StudentDashboard = lazy(() => import('./components/dashboard/student/StudentDashboard'));
const TeacherDashboard = lazy(() => import('./components/dashboard/teacher/TeacherDashboard'));

// ✅ Use Suspense for loading states
<Suspense fallback={<LoadingSpinner />}>
  <StudentDashboard />
</Suspense>
```

### Memoization for Performance
```javascript
// ✅ Memoize expensive calculations
const studentStats = useMemo(() => {
  return calculateStudentProgress(classes, tests, assignments);
}, [classes, tests, assignments]);

// ✅ Memoize components that don't need frequent re-renders
const ClassCard = memo(({ classData, onBook }) => (
  <div className="bg-white rounded-lg shadow-md p-4">
    {/* Class details */}
  </div>
));
```

## Testing Considerations

### Component Testing
```javascript
// ✅ Write testable components
const LoginForm = ({ onSubmit, loading = false }) => {
  // Component logic that's easy to test
};

// ✅ Add data-testid for testing
<button 
  data-testid="submit-button"
  className="bg-blue-600 text-white px-4 py-2 rounded"
>
  Submit
</button>
```

## Environment Configuration

### Environment Variables
```javascript
// ✅ Use environment variables for configuration
const config = {
  apiUrl: process.env.REACT_APP_API_BASE_URL,
  environment: process.env.NODE_ENV,
  maxFileSize: process.env.REACT_APP_MAX_FILE_SIZE || 5242880,
  enableChatbot: process.env.REACT_APP_ENABLE_CHATBOT === 'true',
};
```

## Accessibility Guidelines

### WCAG Compliance
```javascript
// ✅ Add proper ARIA labels and roles
<button
  aria-label="Book class with Dr. Smith"
  className="bg-blue-600 text-white px-4 py-2 rounded"
>
  Book Class
</button>

// ✅ Keyboard navigation support
<div
  role="button"
  tabIndex={0}
  onKeyDown={(e) => e.key === 'Enter' && handleClick()}
  onClick={handleClick}
>
  Clickable div
</div>

// ✅ Focus management
useEffect(() => {
  if (error) {
    errorRef.current?.focus();
  }
}, [error]);
```

## Code Comments & Documentation

### JSDoc Comments
```javascript
/**
 * Custom hook for managing student class bookings
 * @param {string} studentId - The ID of the student
 * @returns {Object} Object containing classes, booking function, and loading state
 */
const useStudentBookings = (studentId) => {
  // Hook implementation
};

/**
 * Component for displaying a list of available classes
 * @param {Array} classes - Array of class objects
 * @param {Function} onBookClass - Callback function when a class is booked
 * @param {boolean} loading - Loading state indicator
 */
const ClassList = ({ classes, onBookClass, loading }) => {
  // Component implementation
};
```

## Git Commit Guidelines

### Commit Message Format
```
feat: add student class booking functionality
fix: resolve teacher dashboard loading issue
docs: update API documentation
style: improve mobile responsiveness for forms
refactor: extract reusable form components
test: add unit tests for authentication
```

## Common Patterns to Follow

### Modal/Dialog Components
```javascript
const Modal = ({ isOpen, onClose, title, children }) => {
  if (!isOpen) return null;
  
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-semibold">{title}</h2>
          <button onClick={onClose} className="text-gray-500 hover:text-gray-700">
            <X className="w-6 h-6" />
          </button>
        </div>
        {children}
      </div>
    </div>
  );
};
```

### Form Validation
```javascript
const useFormValidation = (initialValues, validationRules) => {
  const [values, setValues] = useState(initialValues);
  const [errors, setErrors] = useState({});
  
  const validate = () => {
    const newErrors = {};
    
    Object.keys(validationRules).forEach(field => {
      const rule = validationRules[field];
      const value = values[field];
      
      if (rule.required && !value) {
        newErrors[field] = `${field} is required`;
      } else if (rule.pattern && !rule.pattern.test(value)) {
        newErrors[field] = rule.message;
      }
    });
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
  
  return { values, setValues, errors, validate };
};
```

Remember: Always prioritize user experience, maintainable code, and educational platform-specific features when generating suggestions.