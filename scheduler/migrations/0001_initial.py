# Generated by Django 4.2.7 on 2025-09-12 13:04

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('student', 'student'), ('teacher', 'teacher')], default='student', max_length=10)),
                ('age', models.IntegerField(default=18)),
                ('points', models.IntegerField(default=0)),
                ('subject', models.CharField(blank=True, max_length=50, null=True)),
                ('phone', models.IntegerField(default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AdaptiveDifficultyTracker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic', models.CharField(help_text='Specific topic being learned', max_length=200)),
                ('subject', models.CharField(default='math', max_length=100)),
                ('current_difficulty', models.IntegerField(choices=[(1, 'Level 1 - Foundation'), (2, 'Level 2 - Basic'), (3, 'Level 3 - Intermediate'), (4, 'Level 4 - Advanced'), (5, 'Level 5 - Expert')], default=1, help_text='Current difficulty level')),
                ('target_difficulty', models.IntegerField(choices=[(1, 'Level 1 - Foundation'), (2, 'Level 2 - Basic'), (3, 'Level 3 - Intermediate'), (4, 'Level 4 - Advanced'), (5, 'Level 5 - Expert')], default=3, help_text='Target difficulty to reach')),
                ('consecutive_successes', models.IntegerField(default=0, help_text='Consecutive correct answers')),
                ('consecutive_failures', models.IntegerField(default=0, help_text='Consecutive incorrect answers')),
                ('total_attempts', models.IntegerField(default=0)),
                ('total_successes', models.IntegerField(default=0)),
                ('success_threshold_to_advance', models.IntegerField(default=2, help_text='Consecutive successes needed to advance')),
                ('failure_threshold_to_regress', models.IntegerField(default=3, help_text='Consecutive failures to regress difficulty')),
                ('min_attempts_before_advance', models.IntegerField(default=3, help_text='Minimum attempts before advancing')),
                ('confidence_score', models.FloatField(default=0.5, help_text='0-1 scale of student confidence')),
                ('mastery_percentage', models.FloatField(default=0.0, help_text='0-100 scale of topic mastery')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-last_updated'],
            },
        ),
        migrations.CreateModel(
            name='ChatSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_type', models.CharField(choices=[('exam_chat', 'Exam Chat'), ('interactive_learning', 'Interactive Learning'), ('topic_exploration', 'Topic Exploration')], default='interactive_learning', max_length=20)),
                ('topic', models.CharField(help_text='Main topic being explored', max_length=200)),
                ('subject', models.CharField(default='math', max_length=100)),
                ('learning_goal', models.TextField(help_text='What the student should discover/understand')),
                ('current_understanding_level', models.IntegerField(default=0, help_text='0-100 scale of understanding')),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('paused', 'Paused'), ('abandoned', 'Abandoned')], default='active', max_length=15)),
                ('total_messages', models.IntegerField(default=0)),
                ('discoveries_made', models.IntegerField(default=0, help_text="Number of 'aha' moments detected")),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('engagement_score', models.FloatField(default=0.0, help_text='0-1 scale of student engagement')),
                ('confusion_indicators', models.IntegerField(default=0, help_text='Count of confusion signals')),
                ('breakthrough_moments', models.IntegerField(default=0, help_text='Major understanding breakthroughs')),
                ('session_metadata', models.TextField(default='{}', help_text='Additional session data as JSON string')),
                ('current_question_index', models.IntegerField(default=0, help_text='Current position in question sequence')),
                ('total_questions', models.IntegerField(default=0, help_text='Total questions in this session')),
                ('is_completed', models.BooleanField(default=False, help_text='Whether the session is completed')),
            ],
            options={
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('document_type', models.CharField(choices=[('pdf', 'PDF'), ('image', 'Image'), ('text', 'Text')], max_length=10)),
                ('file_path', models.CharField(max_length=500)),
                ('extracted_text', models.TextField(blank=True, null=True)),
                ('metadata', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('processing_status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=15)),
                ('processing_error', models.TextField(blank=True, null=True)),
                ('processed_content', models.TextField(blank=True, help_text='Extracted text content for AI processing', null=True)),
                ('rag_chunks', models.TextField(blank=True, help_text='JSON stored RAG chunks', null=True)),
                ('questions_generated_count', models.IntegerField(default=0, help_text='Number of questions generated from this document')),
                ('processing_progress', models.TextField(blank=True, default='{}', help_text='Processing progress per difficulty level (JSON string)')),
                ('last_heartbeat', models.DateTimeField(blank=True, help_text='Last processing heartbeat timestamp', null=True)),
                ('current_level_processing', models.CharField(blank=True, help_text='Currently processing difficulty level', max_length=10, null=True)),
                ('total_levels', models.IntegerField(default=3, help_text='Total number of difficulty levels to process')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('subject', models.CharField(default='algorithms', max_length=100)),
                ('difficulty_level', models.CharField(blank=True, choices=[('easy', 'Easy'), ('normal', 'Normal'), ('hard', 'Hard')], max_length=10, null=True)),
                ('total_questions', models.IntegerField(default=10)),
                ('exam_time_limit_minutes', models.IntegerField(blank=True, null=True)),
                ('per_question_time_seconds', models.IntegerField(blank=True, null=True)),
                ('start_at', models.DateTimeField(blank=True, null=True)),
                ('end_at', models.DateTimeField(blank=True, null=True)),
                ('is_published', models.BooleanField(default=False)),
                ('selection_rules', models.TextField(blank=True, help_text='Optional JSON rules for sampling questions', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_students', models.ManyToManyField(blank=True, limit_choices_to={'role': 'student'}, related_name='assigned_exams', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(limit_choices_to={'role': 'teacher'}, on_delete=django.db.models.deletion.CASCADE, related_name='created_exams', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ExamConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(blank=True, help_text='When the exam should become available to students', null=True)),
                ('end_time', models.DateTimeField(blank=True, help_text='When the exam should no longer be available', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_student', models.ForeignKey(blank=True, help_text='Optional student assignment for personalized exams', limit_choices_to={'role': 'student'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assigned_exam_configs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ExamSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the exam session', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Optional description of the exam', null=True)),
                ('num_questions', models.IntegerField(help_text='Total number of questions in this exam session')),
                ('random_topic_distribution', models.BooleanField(default=False, help_text='If true, questions will be distributed randomly across all available topics')),
                ('time_limit_seconds', models.IntegerField(blank=True, help_text='Optional time limit per question in seconds', null=True)),
                ('is_published', models.BooleanField(default=False, help_text='Whether the exam session is published and available to students')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(limit_choices_to={'role': 'teacher'}, on_delete=django.db.models.deletion.CASCADE, related_name='created_exam_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='InteractiveExam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('total_questions', models.IntegerField(default=10)),
                ('time_limit_minutes', models.IntegerField(blank=True, null=True)),
                ('max_attempts_per_question', models.IntegerField(default=3)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(limit_choices_to={'role': 'teacher'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('document', models.ForeignKey(help_text='Source document for questions', on_delete=django.db.models.deletion.CASCADE, to='scheduler.document')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='InteractiveExamQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('correct_answer', models.TextField()),
                ('hint_1', models.TextField(blank=True, help_text='First hint for wrong answer', null=True)),
                ('hint_2', models.TextField(blank=True, help_text='Second hint for wrong answer', null=True)),
                ('hint_3', models.TextField(blank=True, help_text='Third hint for wrong answer', null=True)),
                ('question_type', models.CharField(default='open_ended', max_length=50)),
                ('difficulty', models.CharField(default='medium', max_length=20)),
                ('order_index', models.IntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='scheduler.interactiveexam')),
            ],
            options={
                'ordering': ['order_index'],
            },
        ),
        migrations.CreateModel(
            name='LearningSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic', models.CharField(max_length=100)),
                ('subject', models.CharField(default='Mathematics', max_length=50)),
                ('current_question_index', models.IntegerField(default=0)),
                ('total_questions', models.IntegerField(default=10)),
                ('is_completed', models.BooleanField(default=False)),
                ('correct_answers', models.IntegerField(default=0)),
                ('total_attempts', models.IntegerField(default=0)),
                ('understanding_level', models.IntegerField(default=0)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('strengths', models.TextField(blank=True, null=True)),
                ('weaknesses', models.TextField(blank=True, null=True)),
                ('recommendations', models.TextField(blank=True, null=True)),
                ('student', models.ForeignKey(limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='QuestionBank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('question_type', models.CharField(choices=[('open_ended', 'Open Ended'), ('coding', 'Coding Problem'), ('algorithm_design', 'Algorithm Design'), ('complexity_analysis', 'Complexity Analysis'), ('multiple_choice', 'Multiple Choice')], default='open_ended', max_length=20)),
                ('difficulty_level', models.CharField(choices=[('easy', 'Easy'), ('normal', 'Normal'), ('hard', 'Hard')], max_length=10)),
                ('subject', models.CharField(choices=[('algorithms', 'Algorithms'), ('data_structures', 'Data Structures'), ('sorting', 'Sorting Algorithms'), ('searching', 'Searching Algorithms'), ('graph_algorithms', 'Graph Algorithms'), ('dynamic_programming', 'Dynamic Programming'), ('greedy_algorithms', 'Greedy Algorithms'), ('complexity_analysis', 'Complexity Analysis'), ('recursion', 'Recursion'), ('divide_conquer', 'Divide and Conquer')], default='algorithms', max_length=50)),
                ('expected_approach', models.TextField(blank=True, help_text='Expected solution approach or algorithm', null=True)),
                ('key_concepts', models.TextField(blank=True, help_text='Key concepts the question tests', null=True)),
                ('hints', models.TextField(blank=True, help_text='AI-generated hints for struggling students', null=True)),
                ('sample_solution', models.TextField(blank=True, help_text='Sample solution or pseudocode', null=True)),
                ('correct_answer', models.TextField()),
                ('explanation', models.TextField(blank=True, null=True)),
                ('option_a', models.TextField(blank=True, help_text='Option A for multiple choice questions', null=True)),
                ('option_b', models.TextField(blank=True, help_text='Option B for multiple choice questions', null=True)),
                ('option_c', models.TextField(blank=True, help_text='Option C for multiple choice questions', null=True)),
                ('option_d', models.TextField(blank=True, help_text='Option D for multiple choice questions', null=True)),
                ('is_approved', models.BooleanField(default=True)),
                ('created_by_ai', models.BooleanField(default=True)),
                ('modified_by_teacher', models.BooleanField(default=False)),
                ('is_generated', models.BooleanField(default=True, help_text='True if generated by AI/chat - used for exam filtering')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='scheduler.document')),
            ],
            options={
                'ordering': ['difficulty_level', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('subject', models.CharField(default='math', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TestSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_type', models.CharField(choices=[('level_test', 'Level Test'), ('practice_test', 'Practice Test'), ('exam', 'Exam')], max_length=20)),
                ('difficulty_level', models.CharField(choices=[('easy', 'Easy'), ('normal', 'Normal'), ('hard', 'Hard')], max_length=10)),
                ('subject', models.CharField(default='algorithms', max_length=100)),
                ('total_questions', models.IntegerField(default=10)),
                ('time_limit_minutes', models.IntegerField(blank=True, null=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('score', models.FloatField(blank=True, null=True)),
                ('passed', models.BooleanField(default=False)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('exam', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sessions', to='scheduler.exam')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='TestHint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hint_text', models.TextField(help_text='AI-generated hint text')),
                ('hint_level', models.IntegerField(default=1, help_text='Progressive hint level (1=basic, 2=medium, 3=detailed)')),
                ('student_input', models.TextField(help_text="Student's input that triggered the hint")),
                ('context_used', models.TextField(blank=True, help_text='Document context used for hint', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('was_helpful', models.BooleanField(blank=True, help_text='Student feedback on hint helpfulness', null=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scheduler.questionbank')),
                ('student', models.ForeignKey(limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('test_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hints', to='scheduler.testsession')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='StudentTestResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('difficulty_level', models.CharField(choices=[('easy', 'Easy'), ('normal', 'Normal'), ('hard', 'Hard')], max_length=10)),
                ('total_questions', models.IntegerField()),
                ('correct_answers', models.IntegerField()),
                ('time_taken_seconds', models.IntegerField()),
                ('percentage_score', models.FloatField()),
                ('assessed_level', models.CharField(choices=[('Beginner', 'Beginner'), ('Intermediate', 'Intermediate'), ('Advanced', 'Advanced')], max_length=20)),
                ('questions_used', models.TextField(blank=True, help_text='JSON array of question IDs used', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('student', models.ForeignKey(limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StudentExamSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('in_progress', 'In Progress'), ('completed', 'Completed'), ('abandoned', 'Abandoned')], default='in_progress', max_length=20)),
                ('current_question_index', models.IntegerField(default=0)),
                ('total_questions', models.IntegerField()),
                ('questions_answered', models.IntegerField(default=0)),
                ('correct_answers', models.IntegerField(default=0)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('final_score', models.FloatField(blank=True, null=True)),
                ('total_time_minutes', models.FloatField(blank=True, null=True)),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_sessions', to='scheduler.interactiveexam')),
                ('student', models.ForeignKey(limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-started_at'],
                'unique_together': {('student', 'exam')},
            },
        ),
        migrations.CreateModel(
            name='StudentExamAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('final_answer', models.TextField(blank=True, null=True)),
                ('is_correct', models.BooleanField(default=False)),
                ('attempts_used', models.IntegerField(default=0)),
                ('time_taken_seconds', models.IntegerField(blank=True, null=True)),
                ('answered_at', models.DateTimeField(auto_now_add=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scheduler.interactiveexamquestion')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='scheduler.studentexamsession')),
            ],
            options={
                'ordering': ['question__order_index'],
                'unique_together': {('session', 'question')},
            },
        ),
        migrations.CreateModel(
            name='StudentAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_text', models.TextField(help_text="Student's answer text")),
                ('is_correct', models.BooleanField(default=False)),
                ('time_taken_seconds', models.IntegerField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When the answer was submitted', null=True)),
                ('interaction_log', models.TextField(blank=True, default='{}', help_text='JSON string of extra metadata from conversation/chat flow')),
                ('student_answer', models.TextField(blank=True, help_text='Legacy field - use answer_text instead', null=True)),
                ('answered_at', models.DateTimeField(auto_now_add=True)),
                ('exam_session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_answers', to='scheduler.examsession')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scheduler.questionbank')),
                ('student', models.ForeignKey(blank=True, help_text='Student who provided this answer', limit_choices_to={'role': 'student'}, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('test_session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='scheduler.testsession')),
            ],
            options={
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='QuestionResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('student_answer', models.TextField()),
                ('is_correct', models.BooleanField()),
                ('attempts_count', models.IntegerField(default=1)),
                ('hint_level_reached', models.IntegerField(default=0)),
                ('ai_feedback', models.TextField(blank=True, null=True)),
                ('time_taken_seconds', models.IntegerField(default=0)),
                ('skill_demonstrated', models.CharField(blank=True, max_length=100, null=True)),
                ('difficulty_level', models.IntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='scheduler.learningsession')),
            ],
        ),
        migrations.AddField(
            model_name='questionbank',
            name='topic',
            field=models.ForeignKey(blank=True, help_text='Topic category for this question', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='questions', to='scheduler.topic'),
        ),
        migrations.CreateModel(
            name='QuestionAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(help_text='The exact question asked')),
                ('difficulty_level', models.IntegerField(choices=[(1, 'Level 1 - Foundation'), (2, 'Level 2 - Basic'), (3, 'Level 3 - Intermediate'), (4, 'Level 4 - Advanced'), (5, 'Level 5 - Expert')])),
                ('topic', models.CharField(max_length=200)),
                ('student_answer', models.TextField()),
                ('result', models.CharField(choices=[('correct', 'Correct'), ('incorrect', 'Incorrect'), ('partial', 'Partially Correct'), ('skipped', 'Skipped')], max_length=10)),
                ('time_taken_seconds', models.IntegerField(blank=True, null=True)),
                ('hint_level_used', models.IntegerField(default=0, help_text='0-5 scale of hints needed')),
                ('confidence_before', models.FloatField(blank=True, help_text='Student confidence before attempt', null=True)),
                ('confidence_after', models.FloatField(blank=True, help_text='Student confidence after attempt', null=True)),
                ('understanding_demonstrated', models.TextField(blank=True, help_text='What understanding the student showed')),
                ('misconceptions_identified', models.TextField(blank=True, help_text='Any misconceptions detected')),
                ('attempted_at', models.DateTimeField(auto_now_add=True)),
                ('chat_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_attempts', to='scheduler.chatsession')),
                ('difficulty_tracker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='scheduler.adaptivedifficultytracker')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_attempts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-attempted_at'],
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('teacher', models.CharField(default='TBD', max_length=100)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('duration', models.IntegerField(default=60)),
                ('subject', models.CharField(default='General', max_length=100)),
                ('phone', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('approved', 'approved'), ('pending', 'pending'), ('cancelled', 'cancelled')], default='pending', max_length=10)),
                ('student', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LearningPath',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(default='math', max_length=100)),
                ('current_topic', models.CharField(max_length=200)),
                ('status', models.CharField(choices=[('suggested', 'Suggested'), ('active', 'Active'), ('completed', 'Completed'), ('modified', 'Modified')], default='suggested', max_length=15)),
                ('topics_sequence', models.TextField(help_text='JSON list of topics in learning order')),
                ('current_position', models.IntegerField(default=0, help_text='Current position in sequence')),
                ('student_strengths', models.TextField(blank=True, help_text='JSON list of identified strengths')),
                ('areas_for_growth', models.TextField(blank=True, help_text='JSON list of areas needing work')),
                ('learning_preferences', models.TextField(blank=True, help_text='JSON learning style preferences')),
                ('milestones_achieved', models.TextField(blank=True, help_text='JSON list of completed milestones')),
                ('estimated_completion', models.DateField(blank=True, null=True)),
                ('actual_progress_percent', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('chat_sessions', models.ManyToManyField(blank=True, related_name='learning_paths', to='scheduler.chatsession')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_paths', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-last_updated'],
            },
        ),
        migrations.CreateModel(
            name='ExamSessionTopic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num_questions', models.IntegerField(default=1, help_text='Number of questions to select from this topic')),
                ('exam_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='session_topics', to='scheduler.examsession')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exam_sessions', to='scheduler.topic')),
            ],
        ),
        migrations.CreateModel(
            name='ExamSessionQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_index', models.IntegerField(help_text='Sequential order of questions starting from 1')),
                ('time_limit_seconds', models.IntegerField(blank=True, help_text='Per-question time limit, overrides session default if set', null=True)),
                ('exam_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='session_questions', to='scheduler.examsession')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exam_sessions', to='scheduler.questionbank')),
            ],
            options={
                'ordering': ['order_index'],
            },
        ),
        migrations.AddField(
            model_name='examsession',
            name='manually_selected_questions',
            field=models.ManyToManyField(blank=True, help_text='Manually selected questions for this exam session', related_name='manual_exam_sessions', to='scheduler.questionbank'),
        ),
        migrations.AddField(
            model_name='examsession',
            name='selected_topics',
            field=models.ManyToManyField(blank=True, help_text='Topics selected for this exam session', related_name='selected_exam_sessions', to='scheduler.topic'),
        ),
        migrations.CreateModel(
            name='ExamConfigQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_index', models.PositiveIntegerField(help_text='Sequential order of questions starting from 1')),
                ('exam_config', models.ForeignKey(help_text='The exam configuration this question belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='config_questions', to='scheduler.examconfig')),
                ('question', models.ForeignKey(help_text='The question to include in this exam', on_delete=django.db.models.deletion.CASCADE, related_name='config_questions', to='scheduler.questionbank')),
            ],
            options={
                'ordering': ['order_index'],
            },
        ),
        migrations.AddField(
            model_name='examconfig',
            name='exam_session',
            field=models.ForeignKey(help_text='The exam session this configuration is based on', on_delete=django.db.models.deletion.CASCADE, related_name='configurations', to='scheduler.examsession'),
        ),
        migrations.AddField(
            model_name='examconfig',
            name='teacher',
            field=models.ForeignKey(help_text='Teacher who created this configuration', limit_choices_to={'role': 'teacher'}, on_delete=django.db.models.deletion.CASCADE, related_name='created_exam_configs', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ExamAnswerAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attempt_number', models.IntegerField(help_text='Which attempt this is (1, 2, 3, etc.)')),
                ('answer_text', models.TextField(help_text="The student's answer for this attempt")),
                ('is_correct', models.BooleanField(default=False, help_text='Whether this attempt was correct')),
                ('hint_provided', models.TextField(blank=True, help_text='Hint provided by OLAMA after incorrect answer', null=True)),
                ('olama_context', models.TextField(default='{}', help_text='JSON context for OLAMA conversation')),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('time_taken_seconds', models.IntegerField(blank=True, help_text='Time taken for this attempt', null=True)),
                ('exam_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answer_attempts', to='scheduler.examsession')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answer_attempts', to='scheduler.questionbank')),
                ('student', models.ForeignKey(limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='exam_attempts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['submitted_at'],
            },
        ),
        migrations.AddField(
            model_name='exam',
            name='questions',
            field=models.ManyToManyField(blank=True, related_name='exams', to='scheduler.questionbank'),
        ),
        migrations.CreateModel(
            name='ConversationMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_type', models.CharField(choices=[('student_question', 'Student Question'), ('student_answer', 'Student Answer'), ('ai_guidance', 'AI Guidance'), ('ai_question', 'AI Question'), ('hint', 'Hint'), ('encouragement', 'Encouragement')], max_length=20)),
                ('content', models.TextField()),
                ('sender', models.CharField(choices=[('student', 'Student'), ('ai', 'AI')], max_length=10)),
                ('sentiment_score', models.FloatField(blank=True, help_text='TextBlob sentiment: -1 to 1', null=True)),
                ('understanding_level', models.CharField(blank=True, choices=[('confused', 'Confused'), ('partial', 'Partial Understanding'), ('good', 'Good Understanding'), ('mastery', 'Mastery')], max_length=15, null=True)),
                ('contains_question', models.BooleanField(default=False)),
                ('shows_confusion', models.BooleanField(default=False)),
                ('shows_discovery', models.BooleanField(default=False)),
                ('led_to_discovery', models.BooleanField(default=False, help_text='Did this AI message lead to student discovery?')),
                ('hint_level', models.IntegerField(blank=True, help_text='1-5 scale, 1=gentle nudge, 5=direct guidance', null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('chat_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='scheduler.chatsession')),
            ],
            options={
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ConversationInsight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('insight_type', models.CharField(choices=[('breakthrough', 'Learning Breakthrough'), ('confusion_pattern', 'Confusion Pattern'), ('engagement_change', 'Engagement Change'), ('topic_mastery', 'Topic Mastery'), ('learning_style', 'Learning Style Indicator')], max_length=20)),
                ('description', models.TextField(help_text='What was observed/discovered')),
                ('confidence_score', models.FloatField(help_text='0-1 confidence in this insight')),
                ('recommendation', models.TextField(blank=True, help_text='What should happen next based on this insight')),
                ('detected_at', models.DateTimeField(auto_now_add=True)),
                ('chat_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='insights', to='scheduler.chatsession')),
                ('trigger_messages', models.ManyToManyField(blank=True, to='scheduler.conversationmessage')),
            ],
            options={
                'ordering': ['-detected_at'],
            },
        ),
        migrations.AddField(
            model_name='chatsession',
            name='current_question',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='scheduler.questionbank'),
        ),
        migrations.AddField(
            model_name='chatsession',
            name='exam',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='scheduler.exam'),
        ),
        migrations.AddField(
            model_name='chatsession',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_sessions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ChatInteraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField()),
                ('answer', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('topic', models.CharField(blank=True, max_length=100, null=True)),
                ('difficulty_estimate', models.CharField(blank=True, max_length=50, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('context_used', models.BooleanField(default=False, help_text='Whether RAG context was used')),
                ('sources_count', models.IntegerField(default=0, help_text='Number of document sources used')),
                ('document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='scheduler.document')),
                ('student', models.ForeignKey(limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='adaptivedifficultytracker',
            name='chat_session',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='difficulty_tracker', to='scheduler.chatsession'),
        ),
        migrations.AddField(
            model_name='adaptivedifficultytracker',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='difficulty_trackers', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='StudentExamAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attempt_number', models.IntegerField()),
                ('answer_text', models.TextField()),
                ('is_correct', models.BooleanField(default=False)),
                ('hint_shown', models.TextField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('time_taken_seconds', models.IntegerField(blank=True, null=True)),
                ('answer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='scheduler.studentexamanswer')),
            ],
            options={
                'ordering': ['attempt_number'],
                'unique_together': {('answer', 'attempt_number')},
            },
        ),
        migrations.AddConstraint(
            model_name='studentanswer',
            constraint=models.UniqueConstraint(condition=models.Q(('test_session__isnull', False)), fields=('test_session', 'question', 'student'), name='unique_test_session_answer'),
        ),
        migrations.AddConstraint(
            model_name='studentanswer',
            constraint=models.UniqueConstraint(condition=models.Q(('exam_session__isnull', False)), fields=('exam_session', 'question', 'student'), name='unique_exam_session_answer'),
        ),
        migrations.AddConstraint(
            model_name='studentanswer',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('exam_session__isnull', True), ('test_session__isnull', False)), models.Q(('exam_session__isnull', False), ('test_session__isnull', True)), _connector='OR'), name='one_session_type_required'),
        ),
        migrations.AlterUniqueTogether(
            name='examsessiontopic',
            unique_together={('exam_session', 'topic')},
        ),
        migrations.AlterUniqueTogether(
            name='examsessionquestion',
            unique_together={('exam_session', 'order_index')},
        ),
        migrations.AlterUniqueTogether(
            name='examconfigquestion',
            unique_together={('exam_config', 'order_index'), ('exam_config', 'question')},
        ),
        migrations.AlterUniqueTogether(
            name='examanswerattempt',
            unique_together={('exam_session', 'student', 'question', 'attempt_number')},
        ),
        migrations.AlterUniqueTogether(
            name='adaptivedifficultytracker',
            unique_together={('student', 'topic', 'chat_session')},
        ),
    ]
