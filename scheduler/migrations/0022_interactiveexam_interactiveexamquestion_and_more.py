# Generated by Django 4.2.7 on 2025-09-11 19:08

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('scheduler', '0021_testsession_notes'),
    ]

    operations = [
        migrations.CreateModel(
            name='InteractiveExam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('total_questions', models.IntegerField(default=10)),
                ('time_limit_minutes', models.IntegerField(blank=True, null=True)),
                ('max_attempts_per_question', models.IntegerField(default=3)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(limit_choices_to={'role': 'teacher'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('document', models.ForeignKey(help_text='Source document for questions', on_delete=django.db.models.deletion.CASCADE, to='scheduler.document')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='InteractiveExamQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('correct_answer', models.TextField()),
                ('hint_1', models.TextField(blank=True, help_text='First hint for wrong answer', null=True)),
                ('hint_2', models.TextField(blank=True, help_text='Second hint for wrong answer', null=True)),
                ('hint_3', models.TextField(blank=True, help_text='Third hint for wrong answer', null=True)),
                ('question_type', models.CharField(default='open_ended', max_length=50)),
                ('difficulty', models.CharField(default='medium', max_length=20)),
                ('order_index', models.IntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='scheduler.interactiveexam')),
            ],
            options={
                'ordering': ['order_index'],
            },
        ),
        migrations.RemoveField(
            model_name='testsession',
            name='notes',
        ),
        migrations.CreateModel(
            name='StudentExamSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('in_progress', 'In Progress'), ('completed', 'Completed'), ('abandoned', 'Abandoned')], default='in_progress', max_length=20)),
                ('current_question_index', models.IntegerField(default=0)),
                ('total_questions', models.IntegerField()),
                ('questions_answered', models.IntegerField(default=0)),
                ('correct_answers', models.IntegerField(default=0)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('final_score', models.FloatField(blank=True, null=True)),
                ('total_time_minutes', models.FloatField(blank=True, null=True)),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_sessions', to='scheduler.interactiveexam')),
                ('student', models.ForeignKey(limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-started_at'],
                'unique_together': {('student', 'exam')},
            },
        ),
        migrations.CreateModel(
            name='StudentExamAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('final_answer', models.TextField(blank=True, null=True)),
                ('is_correct', models.BooleanField(default=False)),
                ('attempts_used', models.IntegerField(default=0)),
                ('time_taken_seconds', models.IntegerField(blank=True, null=True)),
                ('answered_at', models.DateTimeField(auto_now_add=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scheduler.interactiveexamquestion')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='scheduler.studentexamsession')),
            ],
            options={
                'ordering': ['question__order_index'],
                'unique_together': {('session', 'question')},
            },
        ),
        migrations.CreateModel(
            name='StudentExamAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attempt_number', models.IntegerField()),
                ('answer_text', models.TextField()),
                ('is_correct', models.BooleanField(default=False)),
                ('hint_shown', models.TextField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('time_taken_seconds', models.IntegerField(blank=True, null=True)),
                ('answer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='scheduler.studentexamanswer')),
            ],
            options={
                'ordering': ['attempt_number'],
                'unique_together': {('answer', 'attempt_number')},
            },
        ),
    ]
