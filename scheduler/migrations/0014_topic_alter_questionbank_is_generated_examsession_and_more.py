# Generated by Django 4.2.23 on 2025-08-09 15:19

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('scheduler', '0013_learningsession_questionresponse'),
    ]

    operations = [
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('subject', models.CharField(default='math', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AlterField(
            model_name='questionbank',
            name='is_generated',
            field=models.BooleanField(default=True, help_text='True if generated by AI/chat - used for exam filtering'),
        ),
        migrations.CreateModel(
            name='ExamSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the exam session', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Optional description of the exam', null=True)),
                ('num_questions', models.IntegerField(help_text='Total number of questions in this exam session')),
                ('random_topic_distribution', models.BooleanField(default=False, help_text='If true, questions will be distributed randomly across all available topics')),
                ('time_limit_seconds', models.IntegerField(blank=True, help_text='Optional time limit per question in seconds', null=True)),
                ('is_published', models.BooleanField(default=False, help_text='Whether the exam session is published and available to students')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(limit_choices_to={'role': 'teacher'}, on_delete=django.db.models.deletion.CASCADE, related_name='created_exam_sessions', to=settings.AUTH_USER_MODEL)),
                ('manually_selected_questions', models.ManyToManyField(blank=True, help_text='Manually selected questions for this exam session', related_name='manual_exam_sessions', to='scheduler.questionbank')),
                ('selected_topics', models.ManyToManyField(blank=True, help_text='Topics selected for this exam session', related_name='selected_exam_sessions', to='scheduler.topic')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='questionbank',
            name='topic',
            field=models.ForeignKey(blank=True, help_text='Topic category for this question', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='questions', to='scheduler.topic'),
        ),
        migrations.CreateModel(
            name='ExamSessionTopic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num_questions', models.IntegerField(default=1, help_text='Number of questions to select from this topic')),
                ('exam_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='session_topics', to='scheduler.examsession')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exam_sessions', to='scheduler.topic')),
            ],
            options={
                'unique_together': {('exam_session', 'topic')},
            },
        ),
        migrations.CreateModel(
            name='ExamSessionQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_index', models.IntegerField(help_text='Sequential order of questions starting from 1')),
                ('time_limit_seconds', models.IntegerField(blank=True, help_text='Per-question time limit, overrides session default if set', null=True)),
                ('exam_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='session_questions', to='scheduler.examsession')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exam_sessions', to='scheduler.questionbank')),
            ],
            options={
                'ordering': ['order_index'],
                'unique_together': {('exam_session', 'order_index')},
            },
        ),
    ]
